namespace Gl {
    using System;
    using System.Runtime.InteropServices;
    public delegate bool glIsBuffer (uint id);
    public delegate bool glIsEnabled (Capability cap);
    public delegate bool glIsProgram (uint id);
    public delegate bool glIsShader (uint id);
    public delegate bool glIsTexture (uint id);
    public delegate bool glIsVertexArray (uint id);
    public delegate FramebufferStatus glCheckNamedFramebufferStatus (uint framebuffer, FramebufferTarget target);
    public delegate int glGetLocation (uint id, [MarshalAs(UnmanagedType.LPStr)] string str);
    public delegate uint glCreateProgram ();
    public delegate uint glCreateShader (int shaderType);
    public delegate void DebugProc (int source, int type, uint id, int severity, int length, string message, IntPtr userParam);
    public delegate void glActiveTexture (uint i);
    public delegate void glAttachShader (uint program, uint shader);
    public delegate void glBindBuffer (BufferTarget target, uint buffer);
    public delegate void glBindFramebuffer (int target, uint buffer);
    public delegate void glBindRenderbuffer (int target, uint buffer);
    public delegate void glBindTexture (int target, uint buffer);
    public delegate void glBindTextureUnit (uint unit, uint texture);
    public delegate void glBindVertexArray (uint i);
    public delegate void glBufferData (int target, long size, IntPtr data, int usage);
    public delegate void glBufferSubData (int target, IntPtr offset, long size, IntPtr data);
    public delegate void glClear (BufferBit mask);
    public delegate void glClearColor (float r, float g, float b, float a);
    public delegate void glCompileShader (uint i);
    public delegate void glCountedArray (int count, uint[] names);
    public delegate void glCreateTextures (int target, int count, uint[] textures);
    public delegate void glCullFace (int i);
    public delegate void glDebugMessageCallback (DebugProc proc, IntPtr userParam);
    public delegate void glDeleteProgram (uint i);
    public delegate void glDeleteShader (uint i);
    public delegate void glDepthFunc (DepthFunc func);
    public delegate void glDrawArrays (Primitive mode, int first, int count);
    public delegate void glDrawArraysIndirect (Primitive mode, IntPtr offsetIntoIndirectBuffer);
    public delegate void glDrawArraysInstanced (Primitive mode, int firstIndex, int indicesPerInstance, int instancesCount);
    public delegate void glDrawArraysInstancedBaseInstance (Primitive mode, int firstIndex, int indicesPerInstance, int instancesCount, uint baseInstance);
    public delegate void glDrawBuffers (int count, Attachment[] buffers);
    public delegate void glDrawElements (Primitive mode, int indicesCount, int type, IntPtr elementsPtrOrOffsetIntoBoundElementArray);
    public delegate void glDrawElementsInstanced (Primitive mode, int indicesCount, int type, IntPtr elementsPtrOrOffsetIntoBoundElementArray, int instancesCount);
    public delegate void glMultiDrawArrays (int mode, int[] first, int[] count, int drawCount);
    public delegate void glMultiDrawArraysIndirect (uint mode, IntPtr indirect, int drawCount, int stride);
    public delegate void glEnableDisable (Capability cap);
    public delegate void glEnableDisableVertexArrayAttrib (uint id, uint index);
    public delegate void glFinish ();
    public delegate void glFlush ();
    public delegate void glDepthMask (bool enabled);
    public delegate void glFramebufferRenderbuffer (int target, int attachment, int renderbufferTarget, uint renderbuffer);
    public delegate void glFramebufferTexture (int target, int attachment, uint texture, int level);
    public delegate void glNamedFramebufferTexture (uint framebuffer, Attachment attachment, uint texture, int level);
    public delegate void glGenerateMipmap (int i);
    public delegate void glGenerateTextureMipmap (uint texture);
    unsafe public delegate void glGet_InfoLog (uint id, int bufferSize, ref int length, byte* log);
    unsafe public delegate void glGetActiveAttrib (uint id, uint index, int bufferSize, out int length, out int size, out AttributeType type, byte* name);
    unsafe public delegate void glGetActiveUniform (uint id, uint index, int bufferSize, out int length, out int size, out UniformType type, byte* name);
    unsafe public delegate void glGetIntegerv (int id, int* values);
    public delegate void glGetProgramInterfaceiv (uint id, ProgramInterface programInterface, InterfaceParameter parameter, int[] paramerers);
    public delegate void glGetProgramiv (uint id, ProgramParameter parameter, out int result);
    public delegate void glGetShaderiv (uint id, ShaderParameter parameter, out int result);
    public delegate void glGetTextureParameterfv (uint texture, TextureParameter name, float[] f);
    public delegate void glGetTextureParameteriv (uint texture, TextureParameter name, int[] i);
    public delegate void glLineWidth (float width);
    public delegate void glLinkProgram (uint i);
    public delegate void glNamedBufferStorage (uint buffer, long size, IntPtr data, int flags);
    public delegate void glNamedRenderbufferStorage (uint buffer, RenderbufferFormat format, int width, int height);
    public delegate void glNamedFramebufferRenderbuffer (uint framebuffer, Attachment attachment, int renderbufferTarget, uint renderbuffer);
    unsafe public delegate void glNamedBufferSubData (uint buffer, long offset, long size, void* data);
    public delegate void glReadBuffer (int i);
    public delegate void glReadnPixels (int x, int y, int width, int height, int format, int type, int bufferSize, IntPtr data);
    public delegate void glReadPixels (int x, int y, int width, int height, int format, int type, IntPtr data);
    public delegate void glRenderbufferStorage (int target, int storage, int width, int height);
    public delegate void glShaderSource (uint id, int count, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] string[] sources, int[] length);
    public delegate void glTexImage2D (int target, int level, int internalFormat, int width, int height, int borderZERO, int pixelFormat, int pixelType, IntPtr data);
    public delegate void glTexSubImage2D (uint target, int level, int xOffset, int yOffset, int width, int height, int format, int type, IntPtr pixels);
    public delegate void glTextureParameterf (uint texture, int name, float f);
    public delegate void glTextureParameteri (uint texture, int name, int i);
    public delegate void glTextureStorage2D (uint texture, int levels, TextureInternalFormat sizedFormat, int width, int height);
    unsafe public delegate void glTextureSubImage2D (uint texture, int level, int xOffset, int yOffset, int width, int height, int format, int type, byte* pixels);
    public delegate void glUniform2i (uint location, int x, int y);
    public delegate void glUniform2f (uint location, float x, float y);
    public delegate void glUniform3f (uint location, float x, float y, float z);
    public delegate void glUniform4f (uint location, float x, float y, float z, float w);
    public delegate void glUniformi (uint location, int value);
    public delegate void glUniformf (uint location, float value);
    public delegate void glUniformiv (uint location, int count, int[] iv);
    public delegate void glUniformfv (uint location, int count, float[] fv);
    public delegate void glUniformMatrix4fv (uint location, long count, bool transpose, System.Numerics.Matrix4x4 matrix);
    public delegate void glUseProgram (uint i);
    public delegate void glVertexAttribDivisor (uint index, uint divisor);
    public delegate void glVertexAttribPointer (uint index, int size, AttribType type, bool normalized, int stride, IntPtr ptr);
    public delegate void glViewport (int x, int y, int width, int height);
    public delegate void glNamedFramebufferDrawBuffers (uint framebuffer, int count, Attachment[] buffers);
}